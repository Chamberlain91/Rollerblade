var m=Object.defineProperty,I=Object.prototype.hasOwnProperty,b=e=>m(e,"__esModule",{value:!0}),D=(e,t)=>{b(e);for(var r in t)m(e,r,{get:t[r],enumerable:!0})},G=(e,t)=>{if(b(e),typeof t=="object"||typeof t=="function")for(let r in t)!I.call(e,r)&&r!=="default"&&m(e,r,{get:()=>t[r],enumerable:!0});return e},o=e=>e&&e.__esModule?e:G(m({},"default",{value:e,enumerable:!0}),e);const w=o(require("fs")),S=o(require("path"));var v={async compile(e){const t=await w.promises.readFile(e),r=S.basename(e);return{files:[{buffer:t,filename:r}],meta:void 0}}};const d=o(require("path"));function s(e,t){let r=d.default.parse(e);return d.default.join(r.dir,r.name+"."+t)}const f=o(require("path")),h=o(require("fs")),C=o(require("os")),F=o(require("esbuild")),L=o(require("crypto"));let R;const q={useConfiguration(e){R=e},async compile(e){const t=s(f.basename(e),"js");let r=C.tmpdir(),i=L.default.randomBytes(16).toString("base64");var n=f.join(r,i);await F.default.build({entryPoints:[e],outfile:n,tsconfig:R,sourcemap:!0,minify:!0,bundle:!0});const c=await h.promises.readFile(n),u=await h.promises.readFile(n+".map");let A=[{filename:t,buffer:c},{filename:t+".map",buffer:u}];return{files:A,meta:void 0}}};var g=q;const E=o(require("fs")),O=o(require("path")),T=o(require("front-matter")),y=o(require("marked")),x=o(require("highlight.js"));let j=new y.default.Renderer({gfm:!0,highlight:function(e,t){const r=x.default.getLanguage(t)?t:"plaintext";return x.default.highlight(r,e).value}});const B={async compile(e){const t=s(O.basename(e),"html"),r=await E.promises.readFile(e),i=r.toString(),{attributes:n,body:c}=T.default(i),u=y.default(c,{renderer:j});return{files:[{filename:t,buffer:Buffer.from(u,"utf8")}],meta:n}},setLinkTransform(e){j.link=function(t,r,i){let n=r?`title='${r}'`:"";return t?`<a href='${e(t)}' ${n}>${i}</a>`:i}},defineCustomBlock(){throw new Error("Not implemented exception")}};B.setLinkTransform(e=>e);var k=B;const P=o(require("util")),U=o(require("path")),M=o(require("node-sass")),z=P.promisify(M.default.render),J={async compile(e){const t=s(U.basename(e),"css");let r=await z({file:e,outFile:t,sourceMapRoot:"./",outputStyle:"compressed",sourceMapContents:!0,sourceMap:!0}),i=[{filename:t,buffer:r.css}];return r.map&&i.push({filename:t+".map",buffer:r.map}),{files:i,meta:void 0}}};var l=J;D(exports,{default:()=>W});const a=o(require("fs")),p=o(require("path")),$=o(require("chalk"));let N={".scss":l.compile,".sass":l.compile,".ts":g.compile,".md":k.compile};var W={async compile(e){if(!a.existsSync(e))throw new Error(`Unable to compile asset. Input file does not exist: '${e}'`);const t=p.extname(e),r=N[t];return console.log("Processing: "+$.default.cyan(`'${e}'`)),r!==void 0?r(e):v.compile(e)},typescript:g,markdown:k,scss:l,makeDirectoryPath(e){const t=p.dirname(e);try{a.readdirSync(t)}catch(r){this.makeDirectoryPath(t);try{a.mkdirSync(t)}catch(i){if(i.code!=="EEXIST")throw i}}}};
